{"version":3,"sources":["linechart.jsx"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAQA,IAAM,YAAY,SAAZ,SAAY,OAA+C;QAA5C,mBAA4C;QAArC,mBAAqC;QAA9B,mBAA8B;QAAvB,qBAAuB;QAAf,eAAe;QAAV,eAAU;;;;;;;AAO7D,UAAM,QAAQ,SAAR,GAAoB,GAApB,GAA0B,KAAK,GAAL,gCAAa,MAAb,CAA1B,CAPuD;AAQ7D,UAAM,QAAQ,SAAR,GAAoB,GAApB,GAA0B,KAAK,GAAL,gCAAa,MAAb,CAA1B;;;;;;;AARuD,QAiBzD,UAAU,EAAV;QACA,SAAS,MAAM,MAAN;QAAc,UAD3B;QAEI,WAAW,SAAU,SAAS,CAAT,CAAV,CAnB8C;;AAqB7D,SAAK,IAAI,IAAI,CAAJ,EAAQ,IAAI,MAAJ,EAAY,GAA7B,EAAkC;AAC9B,YAAI,MAAM,CAAN,CAAJ,CAD8B;AAE9B,gBAAQ,IAAR,CAAc,IAAI,QAAJ,CAAd,CAF8B;AAG9B,gBAAQ,IAAR,CAAc,eAAQ,CAAR,EAAW,GAAX,EAAgB,GAAhB,EAAqB,MAArB,EAA6B,CAA7B,CAAd,EAH8B;KAAlC;;AAOA,WAAO;;;QACH;;;YAAS,KAAT;SADG;QAEH;;cAAK,OAAO,KAAP,EAAc,QAAQ,MAAR,EAAgB,UAAW,SAAQ,KAAR,GAAgB,GAAhB,GAAsB,MAAtB,EAAgC,SAAQ,KAAR,EAAc,OAAM,4BAAN,EAA5F;YACI,4CAAU,MAAK,MAAL,EAAY,QAAO,KAAP,EAAa,QAAQ,OAAR,EAAnC,CADJ;SAFG;KAAP,CA5B6D;CAA/C;;AAqClB,UAAU,SAAV,GAAsB;;;;;AAKlB,WAAO,gBAAM,SAAN,CAAgB,SAAhB,CAA0B,CAC7B,gBAAM,SAAN,CAAgB,OAAhB,CAAwB,gBAAM,SAAN,CAAgB,MAAhB,CADK,EAE7B,gBAAM,SAAN,CAAgB,UAAhB,CAA4B,SAA5B,CAF6B,EAG7B,gBAAM,SAAN,CAAgB,UAAhB,CAA4B,UAA5B,CAH6B,EAI7B,gBAAM,SAAN,CAAgB,UAAhB,CAA4B,iBAA5B,CAJ6B,EAK7B,gBAAM,SAAN,CAAgB,UAAhB,CAA4B,UAA5B,CAL6B,EAM7B,gBAAM,SAAN,CAAgB,UAAhB,CAA4B,WAA5B,CAN6B,EAO7B,gBAAM,SAAN,CAAgB,UAAhB,CAA4B,UAA5B,CAP6B,EAQ7B,gBAAM,SAAN,CAAgB,UAAhB,CAA4B,WAA5B,CAR6B,EAS7B,gBAAM,SAAN,CAAgB,UAAhB,CAA4B,YAA5B,CAT6B,EAU7B,gBAAM,SAAN,CAAgB,UAAhB,CAA4B,YAA5B,CAV6B,CAA1B,CAAP;;;;;AAiBH,WAAO,gBAAM,SAAN,CAAgB,MAAhB;;;;;AAMJ,WAAQ,gBAAM,SAAN,CAAgB,MAAhB;;;;;AAMR,YAAS,gBAAM,SAAN,CAAgB,MAAhB;;;;;AAMT,SAAM,gBAAM,SAAN,CAAgB,MAAhB;;;;;AAMN,SAAM,gBAAM,SAAN,CAAgB,MAAhB;;CA9CV;;AAmDA,UAAU,YAAV,GAAyB;;AAErB,WAAO,EAAP;AACA,WAAO,WAAP;AACA,WAAO,GAAP;AACA,YAAQ,GAAR;;CALJ;;kBASe","file":"linechart.js","sourcesContent":["import React from 'react'\nimport { map as domain } from 'math'\n\n/**\n *  This component plots a line chart based on an input `value` of data. This\n *  can be used for visualising arrays of data, plotting functions or things\n *  fps meters\n */\n\nconst LineChart = ({ value, label, width, height, min, max }) => {\n\n\n    /**\n     *  If no domain is supplied, calculate based on the extremities\n     *  of the `value` data\n     */\n    min = min !== undefined ? min : Math.min( ...value )\n    max = max !== undefined ? max : Math.max( ...value )\n\n\n\n    /**\n     *  In order to render the data we need to populate the array with `x`\n     *  coordinates. Polyine expects an array or `x, y` tuples.\n     */\n\n    let value2D = [],\n        length = value.length, n,\n        interval = width / ( length - 1 )\n\n    for( let i = 0 ; i < length ;i++ ){\n        n = value[i]\n        value2D.push( i * interval )\n        value2D.push( domain( n, min, max, height, 0 ))\n    }\n\n\n    return <div>\n        <label>{ label }</label>\n        <svg width={width} height={height} viewPort={ \"0 0 \"+ width + ' ' + height }  version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n            <polyline fill=\"none\" stroke=\"red\" points={value2D}/>\n        </svg>\n    </div>\n}\n\n\nLineChart.propTypes = {\n\n    /**\n     * An array of numbers to display on the graph\n     */\n    value: React.PropTypes.oneOfType([\n        React.PropTypes.arrayOf(React.PropTypes.number),\n        React.PropTypes.instanceOf( Int8Array ),\n        React.PropTypes.instanceOf( Uint8Array ),\n        React.PropTypes.instanceOf( Uint8ClampedArray ),\n        React.PropTypes.instanceOf( Int16Array ),\n        React.PropTypes.instanceOf( Uint16Array ),\n        React.PropTypes.instanceOf( Int32Array ),\n        React.PropTypes.instanceOf( Uint32Array ),\n        React.PropTypes.instanceOf( Float32Array ),\n        React.PropTypes.instanceOf( Float64Array )\n    ]),\n\n\n\t/**\n\t * Label for form element\n\t */\n\tlabel: React.PropTypes.string,\n\n\n    /**\n     * The width of the line chart in pixels\n     */\n    width : React.PropTypes.number,\n\n\n    /**\n     * The height of the line chart in pixels\n     */\n    height : React.PropTypes.number,\n\n\n    /**\n     * Defines the minimum value of the domain. If none is supplied it will be calculated\n     */\n    min : React.PropTypes.number,\n\n\n    /**\n     * Defines the maximum value of the domain. If none is supplied it will be calculated\n     */\n    max : React.PropTypes.number\n\n}\n\n\nLineChart.defaultProps = {\n\n    value: [],\n    label: 'LineChart',\n    width: 400,\n    height: 200\n\n}\n\nexport default LineChart\n"]}