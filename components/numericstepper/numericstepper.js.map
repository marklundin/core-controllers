{"version":3,"sources":["numericstepper.jsx"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEqB;;;AAEjB,aAFiB,cAEjB,GAAa;8BAFI,gBAEJ;;2EAFI,4BAEJ;;AAET,cAAK,KAAL,GAAa,EAAE,MAAK,KAAL,EAAf,CAFS;;AAIT,cAAK,SAAL,GAAiB,aAAK;AAClB,kBAAK,QAAL,CAAc;AACV,uBAAO,MAAK,KAAL,CAAW,KAAX;AACP,sBAAM,KAAN;aAFJ,EADkB;SAAL,CAJR;;AAWT,cAAK,WAAL,GAAmB,sBAAU,aAAK;AAC9B,gBAAI,cAAc,MAAK,MAAL,CAAY,qBAAZ,EAAd,CAD0B;AAE9B,gBAAI,SAAS,YAAY,GAAZ,GAAkB,YAAY,MAAZ,CAFD;AAG9B,gBAAI,SAAS,YAAY,GAAZ,GAAkB,SAAS,GAAT,CAHD;AAI9B,gBAAI,QAAQ,EAAE,OAAF,GAAY,MAAZ,CAJkB;AAK9B,kBAAK,KAAL,CAAW,QAAX,CAAqB,MAAK,KAAL,CAAW,YAAX,GAA0B,KAA1B,CAArB,CAL8B;SAAL,EAM1B,OAAO,EAAP,CANH,CAXS;;KAAb;;iBAFiB;;2CAuBG,OAAO,OAAO;AAC9B,gBAAI,KAAK,KAAL,CAAW,IAAX,IAAmB,CAAC,MAAM,IAAN,EAAY;AAClC,yBAAS,gBAAT,CAA0B,WAA1B,EAAuC,KAAK,WAAL,CAAvC,CADkC;AAElC,yBAAS,gBAAT,CAA0B,SAA1B,EAAqC,KAAK,SAAL,CAArC,CAFkC;aAApC,MAGO,IAAI,CAAC,KAAK,KAAL,CAAW,IAAX,IAAmB,MAAM,IAAN,EAAY;AACzC,yBAAS,mBAAT,CAA6B,WAA7B,EAA0C,KAAK,WAAL,CAA1C,CADyC;AAEzC,yBAAS,mBAAT,CAA6B,SAA7B,EAAwC,KAAK,SAAL,CAAxC,CAFyC;aAApC;;;;iCAMH;;;AACJ,mBAAO,yCAAO,MAAK,MAAL,EAAY,OAAQ,KAAK,KAAL,CAAW,KAAX,EAAmB,WAAW,KAAK,KAAL,CAAW,QAAX,EAAqB,KAAK;2BAAQ,OAAK,MAAL,GAAc,IAAd;iBAAR,EAA6B,aAAc;2BAAK,OAAK,QAAL,CAAc,EAAC,MAAK,IAAL,EAAW,cAAc,OAAK,KAAL,CAAW,KAAX,EAAxC;iBAAL,EAA9H,CAAP,CADI;;;;WAjCS;EAAuB,gBAAM,SAAN;;kBAAvB","file":"numericstepper.js","sourcesContent":["import React from 'react'\nimport throttle from 'lodash.throttle'\n\nexport default class NumericStepper extends React.Component{\n\n    constructor(){\n        super()\n        this.state = { drag:false }\n\n        this.onMouseUp = _ => {\n            this.setState({\n                value: this.props.value,\n                drag: false\n            })\n        }\n\n        this.onMouseMove = throttle( e => {\n            let boundingBox = this.domRef.getBoundingClientRect()\n            let height = boundingBox.top - boundingBox.bottom\n            let center = boundingBox.top - height * 0.5\n            let value = e.clientY - center\n            this.props.onChange( this.state.initialValue - value )\n        }, 1000 / 60 )\n    }\n\n\n    componentDidUpdate (props, state) {\n        if (this.state.drag && !state.drag) {\n          document.addEventListener('mousemove', this.onMouseMove)\n          document.addEventListener('mouseup', this.onMouseUp)\n        } else if (!this.state.drag && state.drag) {\n          document.removeEventListener('mousemove', this.onMouseMove)\n          document.removeEventListener('mouseup', this.onMouseUp)\n        }\n    }\n\n    render(){\n        return <input type='text' value={ this.props.value } onChangge={this.props.onChange} ref={ref => (this.domRef = ref )} onMouseDown={ e => this.setState({drag:true, initialValue: this.props.value})}></input>\n    }\n}\n"]}